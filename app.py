import streamlit as st
from sentence_transformers import SentenceTransformer, util

# –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∏–ª—å
st.set_page_config(page_title="–°–º—ã—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤", layout="centered")

st.markdown(
    """
    <style>
    body {
        background: black;
        color: #39FF14;
        font-family: 'Courier New', monospace;
    }
    .matrix {
        position: fixed;
        top: 0; left: 0;
        width: 100%; height: 100%;
        z-index: -1;
        background: radial-gradient(circle, rgba(0,0,0,1) 0%, rgba(1,20,9,1) 100%);
    }
    .header {
        font-size: 32px;
        font-weight: bold;
        text-align: center;
        padding: 20px;
        text-shadow: 0 0 10px #0f0;
    }
    .panel {
        background-color: rgba(0,0,0,0.7);
        padding: 20px;
        border: 1px solid #0f0;
        border-radius: 15px;
        box-shadow: 0 0 20px #0f0;
    }
    </style>
    <div class="matrix"></div>
    <div class="header">üåê –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤ —Ç–µ–∫—Å—Ç–æ–≤ (—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫)</div>
    """,
    unsafe_allow_html=True
)

with st.container():
    with st.expander("‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º?", expanded=False):
        st.markdown("""
        1. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
        2. –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É **–°—Ä–∞–≤–Ω–∏—Ç—å**.
        3. –ü–æ–ª—É—á–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç —Å–º—ã—Å–ª–æ–≤–æ–≥–æ —Å—Ö–æ–¥—Å—Ç–≤–∞ –∏ –æ—Ü–µ–Ω–∫—É.
        """)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
@st.cache_resource
def load_model():
    return SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

model = load_model()

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
with st.container():
    st.markdown('<div class="panel">', unsafe_allow_html=True)

    text1 = st.text_area("üìù –¢–µ–∫—Å—Ç 1", height=150)
    text2 = st.text_area("üìù –¢–µ–∫—Å—Ç 2", height=150)

    if st.button("–°—Ä–∞–≤–Ω–∏—Ç—å"):
        if not text1.strip() or not text2.strip():
            st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ç–µ–∫—Å—Ç–∞.")
        else:
            emb1 = model.encode(text1, convert_to_tensor=True)
            emb2 = model.encode(text2, convert_to_tensor=True)

            similarity = util.cos_sim(emb1, emb2).item()
            percent = similarity * 100

            if percent >= 85:
                verdict = "üî∑ –¢–µ–∫—Å—Ç—ã –ø–æ—á—Ç–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã –ø–æ —Å–º—ã—Å–ª—É."
            elif percent >= 60:
                verdict = "üü° –¢–µ–∫—Å—Ç—ã —á–∞—Å—Ç–∏—á–Ω–æ –ø–æ—Ö–æ–∂–∏ –ø–æ —Å–º—ã—Å–ª—É."
            else:
                verdict = "üî¥ –°–º—ã—Å–ª—ã —Ç–µ–∫—Å—Ç–æ–≤ —Ä–∞–∑–Ω—ã–µ."

            st.success(f"**–°—Ö–æ–¥—Å—Ç–≤–æ –ø–æ —Å–º—ã—Å–ª—É: {percent:.2f}%**")
            st.markdown(f"**{verdict}**")

    st.markdown('</div>', unsafe_allow_html=True)
