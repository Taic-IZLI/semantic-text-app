import streamlit as st
from transformers import AutoTokenizer, AutoModel
import torch
from sklearn.metrics.pairwise import cosine_similarity

st.set_page_config(page_title="–°–º—ã—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤", layout="wide")

# üîπ –§–æ–Ω —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
st.markdown("""
<style>
body {
  background: #0f0f0f;
  overflow: hidden;
}
#gradient-background {
  position: fixed;
  top: 0;
  left: 0;
  z-index: -1;
  width: 100vw;
  height: 100vh;
  background: linear-gradient(135deg, #0fffc1, #3c67e3, #0fffc1);
  background-size: 600% 600%;
  animation: gradient 15s ease infinite;
  filter: blur(100px);
  opacity: 0.3;
}
@keyframes gradient {
  0% {background-position: 0% 50%;}
  50% {background-position: 100% 50%;}
  100% {background-position: 0% 50%;}
}
</style>
<div id="gradient-background"></div>
""", unsafe_allow_html=True)

# üîπ –°–∫—Ä–∏–ø—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞
st.markdown("""
<script>
function startDictation(id) {
  const textarea = window.parent.document.querySelectorAll("textarea")[id];
  const recognition = new (window.SpeechRecognition || window.webkitSpeechRecognition)();
  recognition.lang = 'ru-RU';
  recognition.interimResults = false;
  recognition.maxAlternatives = 1;
  recognition.start();

  recognition.onresult = function(event) {
    const transcript = event.results[0][0].transcript;
    textarea.value = transcript;
    textarea.dispatchEvent(new Event('input', { bubbles: true }));
  };

  recognition.onerror = function(event) {
    alert("–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: " + event.error);
  };
}
</script>
""", unsafe_allow_html=True)

# üîπ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    tokenizer = AutoTokenizer.from_pretrained("DeepPavlov/rubert-base-cased-sentence")
    model = AutoModel.from_pretrained("DeepPavlov/rubert-base-cased-sentence")
    return tokenizer, model

tokenizer, model = load_model()

def get_embedding(text):
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True, max_length=128)
    with torch.no_grad():
        outputs = model(**inputs)
    embeddings = outputs.last_hidden_state[:, 0, :].numpy()
    return embeddings

# üîπ –°—Ç–∏–ª–∏
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# üîπ –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å-–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è
with st.sidebar:
    st.markdown("""
    <div class="side-panel">
        <h3>‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è</h3>
        <ul>
            <li>–í–≤–µ–¥–∏—Ç–µ –∏–ª–∏ –Ω–∞–¥–∏–∫—Ç—É–π—Ç–µ –¥–≤–∞ —Ç–µ–∫—Å—Ç–∞</li>
            <li>–ù–∞–∂–º–∏—Ç–µ ¬´–°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã¬ª</li>
            <li>–°–∏—Å—Ç–µ–º–∞ –ø–æ–∫–∞–∂–µ—Ç –ø—Ä–æ—Ü–µ–Ω—Ç —Å–º—ã—Å–ª–æ–≤–æ–π —Å—Ö–æ–∂–µ—Å—Ç–∏</li>
        </ul>
        <p style='color:#aaa;'>–ú–æ–¥–µ–ª—å –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –Ω–µ–π—Ä–æ—Å–µ—Ç–∏ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å–º—ã—Å–ª–∞ —Ñ—Ä–∞–∑.</p>
    </div>
    """, unsafe_allow_html=True)

# üîπ –ó–∞–≥–æ–ª–æ–≤–æ–∫
st.markdown("""
<div class="header">
    <h1>üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤</h1>
    <p>–°—Ä–∞–≤–Ω–∏ —Ç–µ–∫—Å—Ç—ã –∏ —É–∑–Ω–∞–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –±–ª–∏–∑–∫–∏ –ø–æ —Å–º—ã—Å–ª—É</p>
</div>
""", unsafe_allow_html=True)

# üîπ –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —Å –≥–æ–ª–æ—Å–æ–º
col1, col2 = st.columns(2)

with col1:
    st.markdown("<div class='neon-label'>üìù –ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç</div>", unsafe_allow_html=True)
    st.markdown("<button onclick='startDictation(0)' style='margin-bottom:10px;'>üéô –í–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–º</button>", unsafe_allow_html=True)
    text1 = st.text_area("", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç...")

with col2:
    st.markdown("<div class='neon-label'>üìÑ –í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç</div>", unsafe_allow_html=True)
    st.markdown("<button onclick='startDictation(1)' style='margin-bottom:10px;'>üéô –í–≤–µ—Å—Ç–∏ –≥–æ–ª–æ—Å–æ–º</button>", unsafe_allow_html=True)
    text2 = st.text_area("", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç...")

# üîπ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç
if st.button("üöÄ –°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã"):
    if text1 and text2:
        emb1 = get_embedding(text1)
        emb2 = get_embedding(text2)
        similarity = cosine_similarity(emb1, emb2)[0][0]
        percent = similarity * 100

        st.markdown(f"""
        <div class="result-box">
            <h2>üß† –†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
            <p>–°–º—ã—Å–ª–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: <span style='color: #00ffcc; font-size: 24px;'>{percent:.2f}%</span></p>
        </div>
        """, unsafe_allow_html=True)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ç–µ–∫—Å—Ç–∞.")
