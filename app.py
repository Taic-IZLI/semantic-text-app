import streamlit as st
from transformers import AutoTokenizer, AutoModel
import torch
from sklearn.metrics.pairwise import cosine_similarity

st.set_page_config(page_title="–°–º—ã—Å–ª–æ–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤", layout="wide")

# –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
@st.cache_resource
def load_model():
    tokenizer = AutoTokenizer.from_pretrained("DeepPavlov/rubert-base-cased-sentence")
    model = AutoModel.from_pretrained("DeepPavlov/rubert-base-cased-sentence")
    return tokenizer, model

tokenizer, model = load_model()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç–º–±–µ–¥–¥–∏–Ω–≥–∞
def get_embedding(text):
    inputs = tokenizer(text, return_tensors='pt', truncation=True, padding=True)
    with torch.no_grad():
        outputs = model(**inputs)
    embeddings = outputs.last_hidden_state[:, 0, :].numpy()
    return embeddings

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∏–ª–µ–π
with open("style.css") as f:
    st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.markdown("""
<div class="header">
    <h1>üîç –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å–º—ã—Å–ª–æ–≤</h1>
    <p>–°—Ä–∞–≤–Ω–∏ —Ç–µ–∫—Å—Ç—ã –∏ —É–∑–Ω–∞–π, –Ω–∞—Å–∫–æ–ª—å–∫–æ –æ–Ω–∏ –±–ª–∏–∑–∫–∏ –ø–æ —Å–º—ã—Å–ª—É</p>
</div>
""", unsafe_allow_html=True)

col1, col2 = st.columns(2)

with col1:
    text1 = st.text_area("–ü–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç...")

with col2:
    text2 = st.text_area("–í—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç", height=200, placeholder="–í–≤–µ–¥–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —Ç–µ–∫—Å—Ç...")

if st.button("üöÄ –°—Ä–∞–≤–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç—ã"):
    if text1 and text2:
        emb1 = get_embedding(text1)
        emb2 = get_embedding(text2)
        similarity = cosine_similarity(emb1, emb2)[0][0]
        percent = round(similarity * 100, 2)

        st.markdown(f"""
        <div class="result-box">
            <h2>üß† –†–µ–∑—É–ª—å—Ç–∞—Ç:</h2>
            <p>–°–º—ã—Å–ª–æ–≤–∞—è —Å—Ö–æ–∂–µ—Å—Ç—å: <span style='color: #00ffcc; font-size: 24px;'>{percent}%</span></p>
        </div>
        """, unsafe_allow_html=True)

    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–±–∞ —Ç–µ–∫—Å—Ç–∞.")
